{"version":3,"sources":["Square.js","Board.js","calculateWinner.js","Game.js","CalcullatePosition.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","squares","Array","fill","xIsNext","i","_this2","renderSquare","React","Component","calculateWinner","lines","length","_lines$i","slicedToArray","b","c","Game","history","jogadas","values","stepNumber","slice","current","push","CalculatePosition","setState","concat","step","status","winner","moves","map","move","jogada","desc","key","jumpTo","src_Board","handleClick","App","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAGe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBC,QAASL,EAAMK,SACjDL,EAAMM,WC8CAC,cAhDb,SAAAA,EAAYP,GAAM,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KACDe,MAAQ,CACTC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJCX,4EAQLY,GAAG,IAAAC,EAAAV,KACd,OACEV,EAAAC,EAAAC,cAACJ,EAAD,CACEO,MAAOK,KAAKX,MAAMgB,QAAQI,GAC1Bf,QAAS,kBAAMgB,EAAKrB,MAAMK,QAAQe,uCAMtC,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,KACCO,KAAKW,aAAa,GAClBX,KAAKW,aAAa,GAClBX,KAAKW,aAAa,IAErBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,KACGO,KAAKW,aAAa,GAClBX,KAAKW,aAAa,GAClBX,KAAKW,aAAa,IAErBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,KACGO,KAAKW,aAAa,GAClBX,KAAKW,aAAa,GAClBX,KAAKW,aAAa,IAErBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,cA1CUmB,IAAMC,kBCHX,SAASC,EAAgBT,GAWpC,IAVA,IAAMU,EAAO,CACT,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFN,EAAK,EAAGA,EAAIM,EAAMC,OAAQP,IAAI,KAAAQ,EAAAnB,OAAAoB,EAAA,EAAApB,CACjBiB,EAAMN,GADW,GAC5BlB,EAD4B0B,EAAA,GACzBE,EADyBF,EAAA,GACtBG,EADsBH,EAAA,GAEnC,GAAGZ,EAAQd,IAAMc,EAAQd,KAAOc,EAAQc,IAAMd,EAAQd,KAAOc,EAAQe,GACjE,OAAOf,EAAQd,QCkFV8B,cAxFf,SAAAA,EAAYhC,GAAM,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IAChBxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMX,KACDe,MAAQ,CACXkB,QAAS,CAAC,CACRjB,QAASC,MAAM,GAAGC,KAAK,MACvBgB,QAAS,GACTC,OAAQ,KAEVC,WAAY,EACZjB,SAAS,GATKX,2EAaNY,GACV,IAAMa,EAAUtB,KAAKI,MAAMkB,QAAQI,MAAM,EAAG1B,KAAKI,MAAMqB,WAAa,GAC9DE,EAAUL,EAAQA,EAAQN,OAAQ,GAClCX,EAAUsB,EAAQtB,QAAQqB,QAC1BH,EAAUI,EAAQJ,QAAQG,QAC1BF,EAASG,EAAQH,OAAOE,QAE3BZ,EAAgBT,IAAYA,EAAQI,KAGvCJ,EAAQI,GAAKT,KAAKI,MAAMI,QAAU,IAAM,IACxCgB,EAAOI,KAAKvB,EAAQI,IACpBc,EAAQK,KCjCG,SAA2BnB,GACtC,OAAS,IAANA,EACQ,OACI,IAANA,EACE,OACI,IAANA,EACE,OACI,IAANA,EACE,OACI,IAANA,EACE,OACI,IAANA,EACE,OACI,IAANA,EACE,OACI,IAANA,EACE,OAEA,ODeEoB,CAAkBpB,IAC/BT,KAAK8B,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvB1B,QAASA,EACTkB,QAASA,EACTC,OAAQA,KAEVC,WAAYH,EAAQN,OACpBR,SAAUR,KAAKI,MAAMI,0CAKlBwB,GACLhC,KAAK8B,SAAS,CACZL,WAAYO,EACZxB,QAAUwB,EAAO,IAAO,qCAGjB,IAqBHC,EArBGvB,EAAAV,KACDsB,EAAUtB,KAAKI,MAAMkB,QACrBK,EAAUL,EAAQtB,KAAKI,MAAMqB,YAC7BS,EAASpB,EAAgBa,EAAQtB,SAEjC8B,EAAQb,EAAQc,IAAI,SAACJ,EAAMK,GAC/B,IAAMC,EAASN,EAAKT,QAAQS,EAAKT,QAAQP,OAAS,GAC5CrB,EAAQqC,EAAKR,OAAOQ,EAAKR,OAAOR,OAAS,GACzCuB,EAAOF,EAEb,eAAiBA,EAAjB,mBAAAN,OAA2CpC,EAA3C,QAAyD2C,EACzD,mBACA,OACGhD,EAAAC,EAAAC,cAAA,MAAIgD,IAAKH,GACP/C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uCAAuCC,QAAS,kBAAMgB,EAAK+B,OAAOJ,KAAQE,MAanG,OAJEN,EADCC,EACQ,WAAaA,EAEb,iBAAmBlC,KAAKI,MAAMI,QAAU,IAAM,KAGvDlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACkD,EAAD,CACErC,QAASsB,EAAQtB,QACjBX,QAAS,SAACe,GAAD,OAAOC,EAAKiC,YAAYlC,OAGrCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WAAMyC,GACN3C,EAAAC,EAAAC,cAAA,UAAK2C,YAlFEvB,IAAMC,WEKV+B,MARf,WACE,OACEtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqD,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.339796fc.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default function Square(props){\n  return(\n    <button className=\"square btn btn-light\" onClick={props.onClick}>\n          {props.value}\n        </button>\n  )\n}","import React  from 'react'\nimport Square from './Square'\n\nclass Board extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true\n        }\n    }\n    \n    renderSquare(i) {\n      return (\n        <Square \n          value={this.props.squares[i]} \n          onClick={() => this.props.onClick(i)}\n        />\n        );\n    }\n  \n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            <span className=\"num-row\">1</span>\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n          <span className=\"num-row\">2</span>\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n          <span className=\"num-row\">3</span>\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n          <div className=\"board-row\">\n          <span className=\"num-col\">A</span>\n          <span className=\"num-col\">B</span>\n          <span className=\"num-col\">C</span>\n          </div>\n        </div>\n      );\n    }\n  }\n    \n  export default Board","export default function calculateWinner(squares){\n    const lines =[\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n    for (let i =  0; i < lines.length; i++){\n        const [a, b, c] = lines[i]\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n            return squares[a]\n        }\n    }\n}","import React from 'react'\nimport Board from './Board'\nimport calculateWinner from './calculateWinner';\nimport CalculatePosition from './CalcullatePosition';\n\n//import calculatePositionSquare from './calculatePositionSquare';\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null), \n        jogadas: [],\n        values: []\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      \n    }\n  }\n  handleClick(i){\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[history.length -1]\n    const squares = current.squares.slice()\n    const jogadas = current.jogadas.slice()\n    const values = current.values.slice()\n \n    if(calculateWinner(squares) || squares[i]){\n      return\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\n    values.push(squares[i])\n    jogadas.push(CalculatePosition(i))\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        jogadas: jogadas,\n        values: values\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      \n    })\n  }\n\n  jumpTo(step){\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    })\n  }\n    render() {\n      const history = this.state.history\n      const current = history[this.state.stepNumber]\n      const winner = calculateWinner(current.squares)\n     \n      const moves = history.map((step, move) =>{\n        const jogada = step.jogadas[step.jogadas.length - 1]\n        const value = step.values[step.values.length - 1]\n        const desc = move ?\n        \n        'Go to move #' + move + `- Jogada: Input ${value} in ` + jogada:\n        'Go to game start'\n        return (\n           <li key={move}>\n             <button className=\"btn btn-info btn-sm active btn-block\" onClick={() => this.jumpTo(move)}>{desc}</button>\n           </li>\n\n\n        )\n      })\n\n      let status\n      if(winner){\n        status = 'Winner: ' + winner\n      }else{\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\n      }\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n             />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }  \n\n  export default Game\n  \n  ","export default function CalculatePosition(i){\n    if(i === 0){\n        return ' A-1'\n    }else if(i === 1){\n        return ' B-1'\n    }else if(i === 2){\n        return ' C-1'\n    }else if(i === 3){\n        return ' A-2'\n    }else if(i === 4){\n        return ' B-2'\n    }else if(i === 5){\n        return ' C-2'\n    }else if(i === 6){\n        return ' A-3'\n    }else if(i === 7){\n        return ' B-3'\n    }else{\n        return ' C-3'\n    }\n}","import React from 'react';\nimport './App.css';\nimport Game from './Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}